<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  

  <channel>
    <title>MacRuby: Ticket Query</title>
    <link>http://www.macruby.org/trac/query?status=new&amp;status=reopened&amp;max=10&amp;row=description</link>
    <description></description>
    <language>en-US</language>
    <image>
      <title>MacRuby</title>
      <url>http://www.macruby.org/trac/chrome/common/trac_banner.png</url>
      <link>http://www.macruby.org/trac/query?status=new&amp;status=reopened&amp;max=10&amp;row=description</link>
    </image>
    <generator>Trac 0.11.7</generator>
    <item>
        <link>http://www.macruby.org/trac/ticket/105</link>
        <guid isPermaLink="false">http://www.macruby.org/trac/ticket/105</guid>
        <title>#105: BridgeSupport can't convert KCGSessionEventTap as an argument for CGEventTapCreate</title>
        <pubDate>Mon, 28 Jul 2008 02:52:13 GMT</pubDate>
          <dc:creator>juanger@…</dc:creator>
        <description>&lt;p&gt;
When running the following code:
&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;eventTap &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;CGEventTapCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;KCGSessionEventTap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;KCGHeadInsertEventTap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; eventMask&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;
It exits and displays the following error:
&lt;/p&gt;
&lt;pre class="wiki"&gt;`CGEventTapCreate': can't convert Ruby object `1' to Objective-C value of type `^{__CGEventTapProxy=}' (ArgumentError)
&lt;/pre&gt;&lt;p&gt;
Also, the callback function, passed as a lambda can't be converted.
&lt;/p&gt;
</description>
        <category>Results</category>
        <comments>http://www.macruby.org/trac/ticket/105#changelog</comments>
    </item><item>
        <link>http://www.macruby.org/trac/ticket/106</link>
        <guid isPermaLink="false">http://www.macruby.org/trac/ticket/106</guid>
        <title>#106: Syntax error with Variadic function</title>
        <pubDate>Mon, 28 Jul 2008 08:24:52 GMT</pubDate>
          <dc:creator>byblue@…</dc:creator>
        <description>&lt;pre class="wiki"&gt;&amp;gt;&amp;gt; CISampler.alloc.initWithImage(nil, keysAndValues:1, 2, 3)
SyntaxError: (irb):1: syntax error, unexpected ',', expecting tASSOC
CISampler.alloc.initWithImage(nil, keysAndValues:1, 2, 3)
                                                      ^
        from /usr/local/bin/macirb:12:in `&amp;lt;main&amp;gt;'
&lt;/pre&gt;&lt;p&gt;
&lt;a class="wiki" href="http://www.macruby.org/trac/wiki/MacRuby"&gt;MacRuby&lt;/a&gt; was compiled from trunk, revision 380.
&lt;/p&gt;
</description>
        <category>Results</category>
        <comments>http://www.macruby.org/trac/ticket/106#changelog</comments>
    </item><item>
        <link>http://www.macruby.org/trac/ticket/110</link>
        <guid isPermaLink="false">http://www.macruby.org/trac/ticket/110</guid>
        <title>#110: should support `obj.meth:val1, with:val2' syntax</title>
        <pubDate>Tue, 19 Aug 2008 21:09:52 GMT</pubDate>
          <dc:creator>lsansonetti@…</dc:creator>
        <description>&lt;p&gt;
&lt;a class="wiki" href="http://www.macruby.org/trac/wiki/MacRuby"&gt;MacRuby&lt;/a&gt; should support the following syntax
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
obj.meth:v1, with:v2
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
As an alternative to
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
obj.meth v1, with:v2
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Calling `obj.meth:v1, with:v2' right now will pass :v1 (the :v1 symbol and not v1) and v2 as parameters, which is expected, but some Objective-C developers may fall into the trap, because this is very similar to the Objective-C way:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
[obj meth:v1 with:v2]
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Objective-C developers will also probably prefer this syntax because it reveals the real selector that is being sent.
&lt;/p&gt;
</description>
        <category>Results</category>
        <comments>http://www.macruby.org/trac/ticket/110#changelog</comments>
    </item><item>
        <link>http://www.macruby.org/trac/ticket/189</link>
        <guid isPermaLink="false">http://www.macruby.org/trac/ticket/189</guid>
        <title>#189: Bugs with: Class#dup &amp; Object#dup</title>
        <pubDate>Wed, 24 Dec 2008 10:59:55 GMT</pubDate>
          <dc:creator>eloy.de.enige@…</dc:creator>
        <description>&lt;p&gt;
Added test cases for these issues to known_bugs.rb:
&lt;a class="ext-link" href="http://www.macruby.org/trac/changeset/770/MacRuby"&gt;&lt;span class="icon"&gt; &lt;/span&gt;http://www.macruby.org/trac/changeset/770/MacRuby&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Object#dup apparently tries to use NSObject#copyWithZone internally which fails because Object doesn't implement it.
&lt;/p&gt;
&lt;p&gt;
Class#dup simply returns a pointer to the original class instance.
Using #clone does work though.
&lt;/p&gt;
</description>
        <category>Results</category>
        <comments>http://www.macruby.org/trac/ticket/189#changelog</comments>
    </item><item>
        <link>http://www.macruby.org/trac/ticket/197</link>
        <guid isPermaLink="false">http://www.macruby.org/trac/ticket/197</guid>
        <title>#197: A removed, or undefined, pure Objective-C method should raise a NoMethodError when called.</title>
        <pubDate>Tue, 06 Jan 2009 09:55:22 GMT</pubDate>
          <dc:creator>eloy.de.enige@…</dc:creator>
        <description>&lt;p&gt;
Currently when removing a pure Objective-C method a warning is raised.
&lt;/p&gt;
&lt;p&gt;
However, it would be more Ruby-ish if remove_method and undef_method would replace the methods with a stub method which raises a NoMethodError.
&lt;/p&gt;
&lt;p&gt;
This way the user will still get a sensible error message when the application crashes, but will not constantly be warned when removing methods.
&lt;/p&gt;
</description>
        <category>Results</category>
        <comments>http://www.macruby.org/trac/ticket/197#changelog</comments>
    </item><item>
        <link>http://www.macruby.org/trac/ticket/204</link>
        <guid isPermaLink="false">http://www.macruby.org/trac/ticket/204</guid>
        <title>#204: Private methods redefined public are still in private_methods</title>
        <pubDate>Sat, 10 Jan 2009 04:29:22 GMT</pubDate>
          <dc:creator>vincent.isambart@…</dc:creator>
        <description>&lt;p&gt;
All classes have a private puts method. However, if you redefine publically puts in a class, puts is still in its private methods list (but it's also in the public methods). It should only be in the public methods.
&lt;/p&gt;
&lt;pre class="wiki"&gt;class A; end
p A.private_instance_methods.grep(/puts/)
p A.public_instance_methods.grep(/puts/)
class A
  def puts
  end
end
p A.private_instance_methods.grep(/puts/)
p A.public_instance_methods.grep(/puts/)
&lt;/pre&gt;&lt;p&gt;
displays:
&lt;/p&gt;
&lt;pre class="wiki"&gt;[:puts]
[]
[:puts]
[:puts]
&lt;/pre&gt;&lt;p&gt;
instead of: (Ruby 1.9)
&lt;/p&gt;
&lt;pre class="wiki"&gt;[:puts]
[]
[]
[:puts]
&lt;/pre&gt;</description>
        <category>Results</category>
        <comments>http://www.macruby.org/trac/ticket/204#changelog</comments>
    </item><item>
        <link>http://www.macruby.org/trac/ticket/207</link>
        <guid isPermaLink="false">http://www.macruby.org/trac/ticket/207</guid>
        <title>#207: Kernel#framework calls global #copy method while loading Cocoa.</title>
        <pubDate>Wed, 14 Jan 2009 13:37:06 GMT</pubDate>
          <dc:creator>eloy.de.enige@…</dc:creator>
        <description>&lt;p&gt;
This is something I stumbled across when playing with Rake. I have isolated it to the following:
&lt;/p&gt;
&lt;pre class="wiki"&gt;% macirb
irb(main):001:0&amp;gt; module Kernel
irb(main):002:1&amp;gt; def copy(*args) p args; end
irb(main):003:1&amp;gt; end
=&amp;gt; nil
irb(main):004:0&amp;gt; framework "Foundation"
=&amp;gt; true
irb(main):005:0&amp;gt; framework "Cocoa"
[]
[]
[]
[]
[]
[]
=&amp;gt; true
&lt;/pre&gt;&lt;p&gt;
It also breaks if the arity of the #copy method is specified:
&lt;/p&gt;
&lt;pre class="wiki"&gt;% macirb
irb(main):001:0&amp;gt; module Kernel
irb(main):002:1&amp;gt; def copy(one_arg); end
irb(main):003:1&amp;gt; end
=&amp;gt; nil
irb(main):004:0&amp;gt; framework 'Cocoa'
ArgumentError: wrong number of arguments (0 for 1)
	from (irb):4:in `framework'
	from (irb):4
	from /usr/local/bin/macirb:12:in `&amp;lt;main&amp;gt;'
&lt;/pre&gt;&lt;p&gt;
So it seems like something is being evaluated which calls a #copy method while loading frameworks.
&lt;/p&gt;
</description>
        <category>Results</category>
        <comments>http://www.macruby.org/trac/ticket/207#changelog</comments>
    </item><item>
        <link>http://www.macruby.org/trac/ticket/235</link>
        <guid isPermaLink="false">http://www.macruby.org/trac/ticket/235</guid>
        <title>#235: Problems with adding objects to scriptable applications via scripting bridge</title>
        <pubDate>Fri, 20 Mar 2009 11:39:45 GMT</pubDate>
          <dc:creator>i.script@…</dc:creator>
        <description>&lt;p&gt;
hi,
&lt;/p&gt;
&lt;p&gt;
lately I've tried to get some exerience in scripting DEVONthink using the ScriptingBridge. This works overall very well. Only the "create a record with in" command crates headaches for me. The following code-snippet exemplifies the problem:
&lt;/p&gt;
&lt;pre class="wiki"&gt;#!/usr/local/bin/macruby
framework  "Cocoa"
framework  "Foundation"
framework  "ScriptingBridge"
devon =  SBApplication.applicationWithBundleIdentifier("com.devon-technologies.thinkpro2")
theGroup = devon.createLocation '/root/scripts/myscript', :in =&amp;gt; '/'
theRecord =devon.classForScriptingClass("record").alloc.initWithProperties({'type'=&amp;gt;'text','plainText'=&amp;gt;"Hallo Welt!",'name' =&amp;gt;"helloworld"})
puts theRecord.description
#  Scripting Bridge does not actually create an object in the target application until you add the allocated and
#  initialized object to an appropriate element array (SBElementArray), such as records in my example.
#  thats's the way it should be done, but its not working
puts devon.databases[0].records.insertObject(theRecord, :atIndex =&amp;gt; 11)
#  or : puts devon.databases[0].records.addObject(theRecord)
theRecord.createRecordWithIn resultRecord
&lt;/pre&gt;&lt;p&gt;
While working with this code snippet I've found out that:
&lt;/p&gt;
&lt;p&gt;
1. if i use: "puts theRecord" instead of "puts theRecord.description" the script runs out of time
&lt;/p&gt;
&lt;p&gt;
2. the attempt to instantiate a scripting object within DEVONthink creates this error:
&lt;/p&gt;
&lt;pre class="wiki"&gt;
/Users/stereocle/Documents/devonruby.rb:24:in `insertObject:atIndex:': NSGenericException: Apple event returned an error.  Event = 'core'\'crel'{ 'kocl':'DTrc', 'insh':'insl'{ 'kobj':'obj '{ 'want':'DTrc', 'from':'obj '{ 'want':'DTkb', 'from':'null'(), 'form':'indx', 'seld':1 }, 'form':'indx', 'seld':1 }, 'kpos':'befo' }, 'prdt':{ 'DTpl':'utxt'("Hallo Welt"), 'pnam':'utxt'("helloworld"), 'DTty':'utxt'("text") } } (RuntimeError)
Error info = {
    ErrorNumber = -10000;
&lt;/pre&gt;</description>
        <category>Results</category>
        <comments>http://www.macruby.org/trac/ticket/235#changelog</comments>
    </item>
 </channel>
</rss>

